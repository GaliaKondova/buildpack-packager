#!/bin/bash

# To run
#
#   test/test_packager

osx_user_cache_directory="$(getconf DARWIN_USER_CACHE_DIR)test-cache"

# ==================================== Stubs ====================================

uname() {
    echo "$uname"
}

getconf() {
    args="$@"
    if [ "$1" == "DARWIN_USER_CACHE_DIR" ]; then
        echo "$osx_user_cache_directory"
    else
        echo "getconf not stubbed for: ${args}"
        exit 1
    fi
}

# ==================================== Mocks ====================================
# The mocks are not subshell safe.  They work by defining a global bash function that takes precedence over the UNIX
# tools like curl and zip
function curl() {
    args="$@";
    ARGUMENTS_CALLED_WITH_FOR_CURL=("${ARGUMENTS_CALLED_WITH_FOR_CURL[@]}" "$args");
    touch $3
    return 0;
}

function zip() {
    args="$@";
    ARGUMENTS_CALLED_WITH_FOR_ZIP=("${ARGUMENTS_CALLED_WITH_FOR_ZIP[@]}" "$args");
    return 0;
}


# Reset mocks

clearCache() {
    rm -rf ${osx_user_cache_directory}
}

setUp() {
    clearCache
    ARGUMENTS_CALLED_WITH_FOR_CURL=()
    ARGUMENTS_CALLED_WITH_FOR_ZIP=()
    uname="Darwin"
}

# ==================================== Tests ====================================
testDependenciesAreDownloadedInOfflineMode() {
    source $BIN/package offline

    assertEquals 'curl should download files with the url in the saved filename' \
                   "http://ftp.squeak.org/4.5/Squeak-4.5-All-in-One.zip -o ${osx_user_cache_directory}/buildpack-packager/http___ftp.squeak.org_4.5_Squeak-4.5-All-in-One.zip -L" \
                   "${ARGUMENTS_CALLED_WITH_FOR_CURL[0]}"

    assertEquals 'curl downloads 1 dependency' "1" "${#ARGUMENTS_CALLED_WITH_FOR_CURL[@]}"

}

testCacheDirIsLinuxCache() {
    uname="Linux"

    result=$(source $BIN/package offline 2>&1)

    assertTrue 'Permissions errors should occur while testing on OS X' $(contains "$result" "Permission denied")
}

testCacheDirIsOSXCache() {
    source $BIN/package offline

    assertEquals 'curl should download files into the OS X user cache directory' \
               "http://ftp.squeak.org/4.5/Squeak-4.5-All-in-One.zip -o ${osx_user_cache_directory}/buildpack-packager/http___ftp.squeak.org_4.5_Squeak-4.5-All-in-One.zip -L" \
               "${ARGUMENTS_CALLED_WITH_FOR_CURL[0]}"
}

testDependenciesAreNotDownloadedInOnlineMode() {
    source $BIN/package online

    assertEquals 'curl downloads 0 dependencies' "0" "${#ARGUMENTS_CALLED_WITH_FOR_CURL[@]}"
}

testZipForBuildpackIsCreated() {
    source $BIN/package online

    assertEquals 'Buildpack is zipped' "1" "${#ARGUMENTS_CALLED_WITH_FOR_ZIP[@]}"
}

testOnlineZipIsCreatedWithCorrectName() {
    source $BIN/package online
    first_call=${ARGUMENTS_CALLED_WITH_FOR_ZIP[0]}
    assertTrue "online zip has version number and no mode" $(contains "$first_call" "squeak_buildpack-v1.0.1.zip")
}

testOfflineZipIsCreatedWithCorrectName() {
    source $BIN/package offline
    first_call=${ARGUMENTS_CALLED_WITH_FOR_ZIP[0]}
    assertTrue "offline zip has version number and mode" $(contains "$first_call" "squeak_buildpack-offline-v1.0.1.zip")
}

testExcludeFilesFromTheBuildpack() {
    source $BIN/package online

    arguments=$ARGUMENTS_CALLED_WITH_FOR_ZIP[@]

    assertTrue "zip excludes .git"       $(contains "$arguments" " --exclude=*.git/*")
    assertTrue "zip excludes .gitignore" $(contains "$arguments" " --exclude=*.gitignore*")
    assertTrue "zip excludes test"       $(contains "$arguments" " --exclude=*test/*")
}

testCachesDependenciesInOfflineMode() {
    source $BIN/package offline

    assertEquals 'curl should download files with the url in the saved filename' \
                   "http://ftp.squeak.org/4.5/Squeak-4.5-All-in-One.zip -o $osx_user_cache_directory/buildpack-packager/http___ftp.squeak.org_4.5_Squeak-4.5-All-in-One.zip -L" \
                   "${ARGUMENTS_CALLED_WITH_FOR_CURL[0]}"

    assertEquals 'curl downloads 1 dependency' "1" "${#ARGUMENTS_CALLED_WITH_FOR_CURL[@]}"

    source $BIN/package offline --use-cache

    assertEquals 'curl downloads 1 dependencies' "1" "${#ARGUMENTS_CALLED_WITH_FOR_CURL[@]}"
}

testDoesNotUseCacheWithNoCacheFlag() {
    source $BIN/package offline

    assertEquals 'curl should download files with the url in the saved filename' \
                   "http://ftp.squeak.org/4.5/Squeak-4.5-All-in-One.zip -o $osx_user_cache_directory/buildpack-packager/http___ftp.squeak.org_4.5_Squeak-4.5-All-in-One.zip -L" \
                   "${ARGUMENTS_CALLED_WITH_FOR_CURL[0]}"

    source $BIN/package offline

    assertEquals 'curl should download files with the url in the saved filename' \
                   "http://ftp.squeak.org/4.5/Squeak-4.5-All-in-One.zip -o $osx_user_cache_directory/buildpack-packager/http___ftp.squeak.org_4.5_Squeak-4.5-All-in-One.zip -L" \
                   "${ARGUMENTS_CALLED_WITH_FOR_CURL[1]}"

    assertEquals 'curl downloads 2 dependency' "2" "${#ARGUMENTS_CALLED_WITH_FOR_CURL[@]}"
}

testDoesNotSupportCacheFlagInOnlineMode() {
    result=$(source $BIN/package online --use-cache)

    assertTrue 'Usage message should appear' $(contains "$result" "Usage:")
}
# ==================================== Utilities ====================================
function contains() {
    string=$1
    substring=$2

    if [[ $string == *"${substring}"* ]]
    then
        echo '0'
    else
        echo '1'
    fi
}

TEST_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BIN=$TEST_DIR/fixtures/squeak_buildpack/bin
source $TEST_DIR/../vendor/shunit2
